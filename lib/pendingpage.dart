import 'dart:async';
// import 'dart:html';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:mentegoz_technologies/Api.dart';
import 'package:mentegoz_technologies/model.dart';
import 'package:mentegoz_technologies/modelclass.dart';
import 'package:mentegoz_technologies/providerclass.dart';
import 'package:mentegoz_technologies/servicepage.dart';
import 'package:provider/provider.dart';

class PendingPage extends StatefulWidget {
  const PendingPage({super.key});

  @override
  State<PendingPage> createState() => _PendingPageState();
}

class _PendingPageState extends State<PendingPage> {
  late Future<List<Autogenerated>> futureDataList;

  @override
  void initState() {
    super.initState();
    final firebaseIdProvider =
        Provider.of<FirebaseIdProvider>(context, listen: false);
    futureDataList = fetchAlbum();
  }

  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;
    return Scaffold(
      body: Center(
        child: FutureBuilder<List<Autogenerated>>(
          future: fetchAlbum(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return CircularProgressIndicator();
            } else if (snapshot.hasData) {
              print("Data fetched");
              print(snapshot.data!);
              final dataList = snapshot.data![0].data;
              print(dataList!.length);
              print("Printing lists of data");
              if (dataList.isEmpty) {
                return Text('No Data');
              }
              if (dataList == null) {
                return Text('No Data');
              }

              return Padding(
                padding: const EdgeInsets.only(left: 10, right: 10),
                child: GestureDetector(
                  child: GridView.builder(
                    shrinkWrap: true,
                    gridDelegate:
                        const SliverGridDelegateWithFixedCrossAxisCount(
                            crossAxisCount: 2,
                            mainAxisSpacing: 10,
                            crossAxisSpacing: 5),
                    itemCount: dataList.length,
                    itemBuilder: (context, index) {
                      var servicename = dataList[index].serviceName;
                      var clientName = dataList[index].clientName!;
                      var refNo = dataList[index].refNo!;
                      var category = dataList[index].category!;
                      var startDate = dataList[index].startDate!;
                      var endDate = dataList[index].endDate!;
                      var priority = dataList[index].priority!;
                      var endtime = dataList[index].endTime;
                      var startTime = dataList[index].startTime;
                      return GestureDetector(
                          onTap: () {
                            // Navigate to the other page when an item is tapped.
                            Navigator.of(context).push(
                              MaterialPageRoute(
                                builder: (context) => ServicePage(
                                  index: index,
                                  clientName: clientName,
                                  servicename: servicename,
                                  refNo: refNo,
                                  category: category,
                                  enddate: endDate,
                                  startdate: startDate,
                                  endtime: endtime,
                                  starttime: startTime,
                                ),
                                // Replace with the actual page you want to navigate to.
                              ),
                            );
                          },
                          child: Center(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text('Service ${index + 1}'.toUpperCase()),
                                const SizedBox(
                                  height: 10,
                                ),
                                Container(
                                  height: screenHeight / 5,
                                  width: screenWidth / 2.5,
                                  decoration: BoxDecoration(
                                    color: Color.fromARGB(255, 60, 180, 229),
                                    borderRadius: BorderRadius.circular(5),
                                  ),
                                  child: Padding(
                                    padding: const EdgeInsets.only(left: 10),
                                    child: Column(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceEvenly,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          clientName.toUpperCase(),
                                          style: TextStyle(color: Colors.white),
                                        ),
                                        Text(
                                          startDate,
                                          style: TextStyle(color: Colors.white),
                                        ),
                                        Text(
                                          priority.toUpperCase(),
                                          style: TextStyle(color: Colors.black),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ));
                    },
                  ),
                ),
              );
            } else if (snapshot.hasError) {
              return Text('Error: ${snapshot.error}');
            } else {
              return Text('No Data');
            }
          },
        ),
      ),
    );
  }
}
